// VARIABLES
var list = [], // Array to hold players in the game
    pass = 1, // Element holds the current combat pass
    selectedPlayer = null, // Element holds the Player object of the currently selected player
    x, // Counter variable
    i, // Counter variable
    index, // Counter variable for array
    randomNum, // Stores the random number generated by getRandomInt
    score, // Holds total score of the selected random numbers
    int, // Counter variable
    p1, // Holder for a player object
    hits = 0,
    numOfDiceRolled = 0,
    ones = 0,
    skillNum = 0,
    rNum = 0,
    weaponDamage = 0,
    totalDamage = 0,
    netHits = 0,
    armor = 0,
    maxArmor = 0,
    aDice = 0,
    armorSoak = 0,
    aSkill = 0,
    total = 0;

// Hide provided element
function hideElement(element) {
    "use strict";
    if (!element.classList.contains("hidden" || "show")) {
        element.classList.add("hidden");
    } else if (element.classList.contains("show")) {
        element.classList.remove("show");
        element.classList.add("hidden");
    }
}

// Show provided element
function showElement(element) {
    "use strict";
    if (element.classList.contains("hidden")) {
        element.classList.remove("hidden");
    }
}

// Change button color
function changeButton(element, color) {
    "use strict";
    var currentClass = element.className,
        newClass = currentClass,
        buttonType;
    
    switch (color) {
    case ("white"):
        buttonType = "default";
        break;
    case ("blue"):
        buttonType = "primary";
        break;
    case ("green"):
        buttonType = "success";
        break;
    case ("lgtBlue"):
        buttonType = "info";
        break;
    case ("orange"):
        buttonType = "warning";
        break;
    case ("red"):
        buttonType = "danger";
        break;
    default:
        buttonType = "default";
        break;
    }
    
    switch (currentClass) {
    case (currentClass.indexOf("btn-default") > -1):
        newClass = currentClass.replace("default", buttonType);
        break;
    case (currentClass.indexOf("btn-primary") > -1):
        newClass = currentClass.replace("primary", buttonType);
        break;
    case (currentClass.indexOf("btn-success") > -1):
        newClass = currentClass.replace("success", buttonType);
        break;
    case (currentClass.indexOf("btn-info") > -1):
        newClass = currentClass.replace("info", buttonType);
        break;
    case (currentClass.indexOf("btn-warning") > -1):
        newClass = currentClass.replace("warning", buttonType);
        break;
    case (currentClass.indexOf("btn-danger") > -1):
        newClass = currentClass.replace("danger", buttonType);
        break;
    default:
        newClass = currentClass.concat(" btn-default");
        break;
    }
    element.className = newClass;
}

// Constructor for Player class
function Player(name, baseScore, dice, totalScore, npc) {
    "use strict";
    this.name = name; // Name of character
    this.npc = npc; // True if auto-rolled, False if not
    this.base = baseScore; // Base score for NPCs
    this.dice = dice; // Dice to roll for NPCs
    this.actionTaken = false; // Whether the player has taken an action this turn.
    this.totalScore = totalScore; // Holds the current initiative score total
    // Function to determine if this player is tied with another player. Returns true
    // if they are tied, false if not.
    this.isTied = function (p1) {
        return (this.totalScore === p1.totalScore);
    };
}

// Log a message to the log area
function logMessage(string) {
    "use strict";
    var message = document.createElement("span"),
        parent = document.getElementById("logArea"),
        linebreak = document.createElement("br");
    message.innerHTML = string;
    //parent.appendChild(message);
    parent.insertBefore(message, parent.firstChild);
    parent.insertBefore(linebreak, message);
}

// Toggles the damage section to be disabled or enabled.
function damageSection(state) {
    "use strict";
    document.getElementById("weaponSpin").disabled = state;
    document.getElementById("armorSpin").disabled = state;
    document.getElementById("maxArmorSpin").disabled = state;
    document.getElementById("aRollDiceButton").disabled = state;
    document.getElementById("aDiceSpin").disabled = state;
    document.getElementById("aSkillSpin").disabled = state;
}

// Enables the GM hit activation
function activateForm() {
    "use strict";
    if (document.getElementById("manualCheck").checked) {
        damageSection(false);
        document.getElementById("manualHitSpin").disabled = false;
    } else {
        damageSection(true);
        document.getElementById("manualHitSpin").disabled = true;
    }
}

/******************
 * Sort Functions *
 ******************/

// Compare function. 
function compareByScore(a, b) {
    "use strict";
    return b.totalScore - a.totalScore;
}

// Sets spinners in the mod area to 0.
function resetSpinners() {
    "use strict";
    document.getElementById("modScoreSpin").value = 0;
    // document.getElementById("modDiceSpin").value = 0;
    document.getElementById("modBaseSpin").value = 0;
}

// Changes settings on forms depending if the customer is an NPC or PC
function setOptionsList() {
    "use strict";
    if (!selectedPlayer.npc) {
        // document.getElementById("modDiceSpin").disabled = true;
        // document.getElementById("diceModButton").disabled = true;
        document.getElementById("modBaseSpin").disabled = true;
        document.getElementById("baseModButton").disabled = true;
    } else {
        // document.getElementById("modDiceSpin").disabled = false;
        // document.getElementById("diceModButton").disabled = false;
        document.getElementById("modBaseSpin").disabled = false;
        document.getElementById("baseModButton").disabled = false;
    }
}

// Function for when user clicks on a player element in the list
// **** POSSIBLE ISSUE WITH THE ID ****
function choosePlayer() {
    
    // Get ID of square
    var id = this.id;
    
    $('.npcsquare').removeClass('active');
    $('.pcsquare').removeClass('active');
    // If the one clicked is the one already selected, set it to default color and
    // hide the toolbox/remove player button.
    if (list[Number(id)] === selectedPlayer) {
        document.getElementById("option" + id.toString()).reset();
        hideElement(document.getElementById("toolbox"));
        hideElement(document.getElementById("removePlayerButton"));
        selectedPlayer = null;
    } else {
        // If nothing selected or different selected, change the color to a red outline
        // and change selected Player to the one chosen.
        document.getElementById(id).classList.add('active');
        selectedPlayer = list[Number(id)];
        showElement(document.getElementById("toolbox"));
        showElement(document.getElementById("removePlayerButton"));
        setOptionsList(); // Add the toolbox
    }
}

// Take the list of players and display them in a list with name and score.
function displayPlayers() {
    "use strict";
    var square,
        mainLabel,
        nameLabel,
        initLabel,
        linebreak,
        foo = document.getElementById("playerListArea"),
        foo1 = document.getElementById("gonePlayersArea");
    // Remove current list to prevent duplication
    foo.innerHTML = "";
    foo1.innerHTML = "";
    
    
    // Iterate through. If PC, give the box a green box. If NPC, blue.
    for (index = 0; index < list.length; index += 1) {
        square = document.createElement("input");
        mainLabel = document.createElement("label");
        linebreak = document.createElement("br");
        nameLabel = document.createTextNode(list[index].name);
        initLabel = document.createTextNode(list[index].totalScore);
        if (list[index].npc) {
            mainLabel.className = 'npcsquare btn btn-primary';
        } else {
            mainLabel.className = 'pcsquare btn btn-success';
        }
        // When user clicks on the square, have it select that player.
        mainLabel.onclick = choosePlayer;
        square.name = "playerOptions";
        square.type = "radio";
        square.id = "option" + index.toString();
        mainLabel.id = index.toString();
        
        mainLabel.appendChild(square);
        
        mainLabel.appendChild(nameLabel);
        mainLabel.appendChild(linebreak);
        mainLabel.appendChild(initLabel);
        
        
        
        
        // If the player has taken their action, put them in the back section of the list.
        if (list[index].actionTaken) {
            foo1.appendChild(mainLabel);
        } else {
            foo.appendChild(mainLabel);
        }
    }
    
    // If a player is already selected, select that player again after redraw
    // If not, hide the toolbox and remove player button.
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        changeButton(document.getElementById(index), "red");
    } else {
        hideElement(document.getElementById("toolbox"));
        hideElement(document.getElementById("removePlayerButton"));
    }
}

// Sorts the player list. Resets the spinners. Displays players.
function sortPlayers() {
    "use strict";
    list.sort(compareByScore);
    resetSpinners();
    displayPlayers();
}

// Roll a dice, returns 1 through 10.
function getRandomInt() {
    "use strict";
    return Math.floor((Math.random() * 10) + 1);
}

// Determines total score for NPCs by rolling the selected number of dice and
// adding to current score.
function getTotalScore(base, dice) {
    "use strict";
    randomNum = 0;
    for (x = 0; x < dice; x += 1) {
        randomNum = randomNum + getRandomInt();
    }
    score = Number(base) + Number(randomNum);
    return score;
}

// Go to the next round. Gather scores for PCs and roll for NPCs. Prompt to check for STI.
function nextRound() {
    "use strict";
    pass = 1;
    
    // Reset players. Set their action taken flag to false.
    for (index = 0; index < list.length; index += 1) {
        list[index].actionTaken = false;
        if (list[index].npc) {
            list[index].totalScore = getTotalScore(list[index].base, list[index].dice);
        } else {
            var score = prompt("What is " + list[index].name + "'s initiative score this round?", "");
            if (!isNaN(Number(score)) && Number(score) >= 0) {
                list[index].totalScore = Number(score);
            } else {
                prompt("Invalid input. Please enter " + list[index].name + "'s initiative score.", "");
            }
        }
    }
    sortPlayers();
    getNextPlayer();
}

// Goes through array to find the next player who has an action available this
// pass. If none, goes to next pass or next round.
function getNextPlayer() {
    "use strict";
    if (list.length > 0) {
        var allActionsTaken = true,
            playerString = ""; // Holds the string to return for who is up next.
        // Tests if all actions have been taken.
        p1 = null;
        
        for (index = 0; index < list.length; index += 1) {
            x = list[index]; // Hold the current player in the iteration
            // Determine if current player can take an action
            if ((!x.actionTaken) && (x.totalScore > 0)) {
                // Compare to previous player to see if tied
                if (p1 !== null) {
                    if (!x.isTied(p1)) {
                        break;
                    } else {
                        // If players are tied, add them both to the label.
                        playerString = playerString.concat(" & ");
                        playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                        x.actionTaken = true;
                        allActionsTaken = false;
                        p1 = x; // Check next player
                    }
                } else {
                    // If this is first player, add name to the list and go to next player
                    playerString = playerString.concat(x.name + ": " + x.totalScore.toString());
                    x.actionTaken = true;
                    allActionsTaken = false;
                    p1 = x;
                }
            }
        }
        
        // If the list fully iterates and no one has a turn available, go to the next combat pass.
        if (allActionsTaken) {
            logMessage("All players have gone this turn. Combat pass " + pass + " complete.");
            nextRound();
        } else {
            // Otherwise, set the next player label to who is going next.
            document.getElementById("nextPlayerLabel").innerHTML = playerString;
            logMessage(playerString + " have taken their actions.");
        }
        // Hide the new player form
        hideElement(document.getElementById("newPlayerDiv"));
        showElement(document.getElementById("newPlayerButton"));
        sortPlayers(); // Sort the player list.
    }
}

/***************************
 * Player Helper Functions *
 ***************************/

/*
 * @param int base: Base score of NPC
 * @param int dice: Number of additional dice for NPC
 * @returns int score: Returns total score of base + dice total
 */






// Success checker
function getHits(numDice, skillNum) {
    "use strict";
    i = 0;
    for (x = 0; x < numDice; x += 1) {
        randomNum = getRandomInt();
        if (randomNum >= skillNum) {
            i += 1;
        }
    }
    return i;
}

// Take info from form and roll dice and determine number of successes.
function rollDice() {
    "use strict";
    var hitsLabel = document.getElementById("hitsLabel");
    numOfDiceRolled = Number(document.getElementById("numOfDiceSpin").value);
    skillNum = Number(document.getElementById("skillSpin").value);
    hits = getHits(numOfDiceRolled, skillNum);
    hitsLabel.innerHTML = "Hits: " + hits;
    logMessage("GM Rolled " + numOfDiceRolled + " dice and got " + hits + " hits.");
}

// Take info from combat form and roll dice and determine damage.
function combatRollDice() {
    "use strict";
    var damageLabel = document.getElementById("damageLabel"),
        hitsBox = document.getElementById("manualHitSpin");
    numOfDiceRolled = Number(document.getElementById("cNumOfDiceSpin").value);
    skillNum = Number(document.getElementById("cSkillSpin").value);
    rNum = Number(document.getElementById("rSpin").value);
    hits = getHits(numOfDiceRolled, skillNum);
    if (hits < rNum) {
        totalDamage = 0;
        damageLabel.innerHTML = "Miss!";
        logMessage("GM Rolled " + numOfDiceRolled + " dice and got " + hits + " hits. This did not beat the R# of " + rNum + ". Miss.");
        damageSection(true);
        hitsBox.value = 0;
    } else {
        netHits = hits - rNum;
        hitsBox.value = netHits;
        damageLabel.innerHTML = "Hit! Net hits: " + netHits + ".";
        logMessage("GM Rolled " + numOfDiceRolled + " dice and got " + hits + " hits. Net hits: " + netHits + ".");
        damageSection(false);
    }
}

function armorRollDice() {
    "use strict";
    var damageLabel = document.getElementById("damageLabel");
    weaponDamage = Number(document.getElementById("weaponSpin").value);
    if (document.getElementById("manualCheck").checked) {
        netHits = Number(document.getElementById("manualHitSpin").value);
    }
    totalDamage = (netHits + 1) * weaponDamage;
    armor = Number(document.getElementById("armorSpin").value);
    maxArmor = Number(document.getElementById("maxArmorSpin").value);
    aDice = Number(document.getElementById("aDiceSpin").value);
    aSkill = Number(document.getElementById("aSkillSpin").value);
    armorSoak = getHits(aDice, aSkill) * armor;
    if (armorSoak > maxArmor) {
        armorSoak = maxArmor;
    }
    total = totalDamage - armorSoak;
    if (total < 0) { total = 0; }
    damageLabel.innerHTML = "Weapon hits for " + totalDamage + ". Armor blocks " + armorSoak + ". Total damage: " + total + ".";
    logMessage("Weapon hits for " + totalDamage + ". Armor blocks " + armorSoak + ". Total damage: " + total + ".");
    damageSection(true);
    document.getElementById("manualCheck").checked = false;
    activateForm();
}

// Resets a form to default values
function resetForm(form) {
    "use strict";
    var frm_elements = form.elements,
        field_type;
    for (i = 0; i < frm_elements.length; i += 1) {
        field_type = frm_elements[i].type.toLowerCase();
        switch (field_type) {
        case "text":
        case "password":
        case "textarea":
        case "hidden":
            frm_elements[i].value = "";
            break;
        case "radio":
        case "checkbox":
            if (frm_elements[i].checked) {
                frm_elements[i].checked = false;
            }
            break;
        case "select-one":
        case "select-multi":
            frm_elements[i].selectedIndex = -1;
            break;
        case "number":
            frm_elements[i].value = 1;
            break;
        default:
            break;
        }
        
    }
    hideElement(document.getElementById("diceSpinLabel"));
    hideElement(document.getElementById("diceLabel"));
    hideElement(document.getElementById("diceSpin"));
}




// Takes the information provided by the New Player form and creates a Player
// object and adds the list array.
function addPlayer(form) {
    "use strict";
    var name = document.forms.newPlayerForm.nameInput.value,
        npc,
        base,
        dice,
        player;
    if (name === "") {
        alert("No name entered.");
        return false;
    } else {
        npc = document.forms.newPlayerForm.npcRadio.checked;
        base = Number(document.forms.newPlayerForm.scoreSpin.value);
        dice = Number(document.forms.newPlayerForm.diceSpin.value);
        
        //Determine score
        if (!npc) {
            score = base;
        } else {
            score = getTotalScore(base, dice);
        }
        
        // Create the player object
        player = new Player(name, base, dice, score, npc);
        list.push(player); // Adds to the list
        logMessage("New Player " + name + " has been added.");
        resetForm(form); // Resets the new player form
        showElement(document.getElementById("getNextPlayerButton"));
        sortPlayers(); // Sort and display the player list.
        return false; // Do not submit form.
    }
}

// If the Auto-Roll Dice button is checked, show the + d10 area, if not, hide.
function selectNPC() {
    "use strict";
    if (document.getElementById("npcRadio").checked) {
        document.getElementById("diceSpin").disabled = false;
        showElement(document.getElementById("diceSpinLabel"));
        showElement(document.getElementById("diceLabel"));
        showElement(document.getElementById("diceSpin"));
        document.getElementById("initDiv").classList.remove("col-lg-4");
        document.getElementById("initDiv").classList.add("col-lg-7");
    } else {
        document.getElementById("diceSpin").disabled = true;
        hideElement(document.getElementById("diceLabel"));
        hideElement(document.getElementById("diceSpin"));
        hideElement(document.getElementById("diceSpinLabel"));
        document.getElementById("initDiv").classList.remove("col-lg-7");
        document.getElementById("initDiv").classList.add("col-lg-4");
    }
}

// Show the New Player Form when user presses New Player button.
function showNewPlayerForm() {
    "use strict";
    showElement(document.getElementById("newPlayerDiv"));
    hideElement(document.getElementById("newPlayerButton"));
    hideElement(document.getElementById("toolbox"));
}

// Show the dice roller when button is clicked
function showDiceArea() {
    "use strict";
    var diceArea = document.getElementById("rollDiceDiv"),
        diceButton = document.getElementById("diceRollerButton");
    if (diceArea.classList.contains("hidden")) {
        showElement(diceArea);
        diceButton.innerHTML = "Hide Dice Roller";
    } else {
        hideElement(diceArea);
        diceButton.innerHTML = "Show Dice Roller";
    }
}

// Show the combat dice roller when button is clicked
function showCombatArea() {
    "use strict";
    var cDiceArea = document.getElementById("combatRollDiceDiv"),
        cDiceButton = document.getElementById("combatRollerButton");
    if (cDiceArea.classList.contains("hidden")) {
        showElement(cDiceArea);
        cDiceButton.innerHTML = "Hide Combat Dice Roller";
    } else {
        hideElement(cDiceArea);
        cDiceButton.innerHTML = "Show Combat Dice Roller";
    }
}

// Delete a player from the list.
function removePlayer() {
    "use strict";
    if (selectedPlayer !== null) {
        index = list.indexOf(selectedPlayer);
        if (index > -1) {
            list.splice(index, 1);
            logMessage(selectedPlayer.name + " has been removed from combat.");
        }
    }
    selectedPlayer = null;
    sortPlayers();
}

// Modifies the total initiative score.
function modTotalScore() {
    "use strict";
    int = Number(document.getElementById("modScoreSpin").value);
    
    if (selectedPlayer !== null && int !== 0) {
        selectedPlayer.totalScore += int;
        logMessage(selectedPlayer.name + " has changed initiative score by " + int + ".");
        sortPlayers();
    }
}

// Modifies the base score (for NPCs)
function modBase() {
    "use strict";
    int = Number(document.getElementById("modBaseSpin").value);
    
    if (selectedPlayer !== null && int !== 0 && selectedPlayer.npc) {
        selectedPlayer.totalScore += int;
        selectedPlayer.base += int;
        logMessage(selectedPlayer.name + " has modified base and total score by " + int + ".");
        sortPlayers();
    }
}

// Modifies score based off value passed
function modScore(i) {
    "use strict";
    int = Number(i);
    if (selectedPlayer !== null) {
        selectedPlayer.totalScore += i;
        logMessage(selectedPlayer.name + " has changed initiative score by " + i + ".");
        sortPlayers();
    }
}

// Function does a quick +1 or -1 to total score. Also reduces base score
// for auto-roll. Used for when NPCs or PCs take a wound or get healed.
function quickMod(opt) {
    "use strict";
    if (selectedPlayer !== null) {
        if (opt === "+") {
            logMessage(selectedPlayer.name + " has gained 1 initiative.");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore += Number(1);
                selectedPlayer.base += Number(1);
            } else {
                selectedPlayer.totalScore += Number(1);
            }
        } else if (opt === "-") {
            logMessage(selectedPlayer.name + " has lost 1 initiative.");
            if (selectedPlayer.npc) {
                selectedPlayer.totalScore -= Number(1);
                selectedPlayer.base -= Number(1);
            } else {
                selectedPlayer.totalScore -= Number(1);
            }
        }
        sortPlayers();
    }
}



// For testing purposes, adds a variety of players.
function testPlayers() {
    "use strict";
    var p1 = new Player("Striker", 21, 0, 21, false),
        p2 = new Player("Snowe", 12, 0, 12, false),
        p3 = new Player("Gabby", 20, 0, 20, false),
        p4 = new Player("Saergent", 14, 1, 23, true),
        p5 = new Player("Grunts", 9, 1, 12, true),
        p6 = new Player("Link", 15, 0, 15, false);
    list.push(p1);
    list.push(p2);
    list.push(p3);
    list.push(p4);
    list.push(p5);
    list.push(p6);
    sortPlayers();
}